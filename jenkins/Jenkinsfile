node {

    // configure secret keys (available only on current node)
    // FABRIC_API_KEY and FABRIC_API_SECRET - build String parameters
    env.FABRIC_API_KEY = "${FABRIC_API_KEY}"
    env.FABRIC_API_SECRET = "${FABRIC_API_SECRET}"

    stage('Clone') {
        git url: 'git@github.com:vgaidarji/ci-matters.git',
            branch: 'master',
            credentialsId: '3ad9453e-3e34-44c4-977e-88f6b9f60dad'
    }

    stage('Build') {
        buildDebug()
    }

    stage('Unit tests') {
        unitTests()
    }

    stage('UI tests') {
        uiTests()
    }

    stage('Static code analysis') {
        staticCodeAnalysis()
    }

    stage('Upload to Fabric') {
        uploadToFabric()
    }

    stage('Notify via email') {
        notifyViaEmail()
    }
}

def buildDebug() {
    sh "./gradlew clean assembleDebug -PversionCode=${env.BUILD_NUMBER}  -PfabricApiKey=${env.FABRIC_API_KEY} -PfabricApiSecret=${env.FABRIC_API_SECRET}"
    archiveArtifacts artifacts: 'app/build/outputs/apk/*.apk', fingerprint: true
}

def staticCodeAnalysis() {
    sh "./gradlew lintDebug buildDashboard -PversionCode=${env.BUILD_NUMBER} -PfabricApiKey=${env.FABRIC_API_KEY} -PfabricApiSecret=${env.FABRIC_API_SECRET}"
    publishLintResults()
    publishJunitResults()
    publishJaCoCoCoverage()
    publishHtmlReports()
}

def unitTests() {
    sh "./gradlew testDebug jacocoTestReport coveralls -PversionCode=${env.BUILD_NUMBER}  -PfabricApiKey=${env.FABRIC_API_KEY} -PfabricApiSecret=${env.FABRIC_API_SECRET}"
}

def publishLintResults() {
    androidLint canComputeNew: false,
        defaultEncoding: '',
        healthy: '',
        pattern: '**/reports/lint/lint-result.xml',
        unHealthy: ''
}

def publishJunitResults() {
    step([$class: "JUnitResultArchiver",
        testResults: "**/app/build/test-results/debug/*.xml"])
}

def publishJaCoCoCoverage() {
    step([$class: 'JacocoPublisher',
        execPattern:'**/**.exec',
        classPattern: '**/classes',
        sourcePattern: '**/src/main/java',
        exclusionPattern: '**/R.class, **/R$*.class, **/*$ViewBinder*.*, **/*$InjectAdapter*.*, **/*Injector*.*, **/BuildConfig.*, **/Manifest*.*, **/*Test*.*, **/*Activity*.*, **/CiMattersApplication*.*, android/**/*.*'])
}

def publishHtmlReports() {
    publishHTML([allowMissing: true,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: 'app/build/reports/buildDashboard',
        reportFiles: 'index.html',
        reportName: 'Combined HTML report'])
    publishHTML([allowMissing: true,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: 'app/build/reports/androidTests/connected',
        reportFiles: 'index.html',
        reportName: 'UI tests report'])
    publishHTML([allowMissing: true,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: 'app/build/reports/coverage',
        reportFiles: 'index.html',
        reportName: 'UI tests report'])
}

def uploadToFabric() {
    sh "./gradlew crashlyticsUploadDistributionDebug -PversionCode=${env.BUILD_NUMBER} -PfabricApiKey=${env.FABRIC_API_KEY} -PfabricApiSecret=${env.FABRIC_API_SECRET}"
}

// works on local PC, but doesn't work in Jenkins for some reason
// same emulator configuration works fine in regular, non-pipeline Jenkins job
def uiTests() {
    // get rid of running emulators
    sh '${ANDROID_HOME}/platform-tools/adb devices | grep emulator | cut -f1 | while read line; do ${ANDROID_HOME}/platform-tools/adb -s $line emu kill; done'

    // start android emulator
    sh '''
    START=$SECONDS > /dev/null
    echo no | ${ANDROID_HOME}/tools/android create avd --force -n test -t android-21 --abi default/armeabi-v7a
    ${ANDROID_HOME}/tools/emulator -engine classic -avd test -no-window -no-boot-anim -noaudio -verbose &

    # Wait for Android to finish booting
    WAIT_CMD="${ANDROID_HOME}/platform-tools/adb wait-for-device shell getprop init.svc.bootanim"
    until $WAIT_CMD | grep -m 1 stopped; do
      echo "Waiting..." > /dev/null
      sleep 1
    done

    # Unlock the Lock Screen
    ${ANDROID_HOME}/platform-tools/adb shell input keyevent 82 &
    ${ANDROID_HOME}/platform-tools/adb shell input keyevent 4 &

    duration=$(( SECONDS - START )) > /dev/null
    echo "Android Emulator started after $duration seconds."
    '''

    // emulator isn't ready yet, wait 1 min more
    // prevents APK installation error
    sh "sleep 60"

    // show available instrumentations (optional)
    //sh "${ANDROID_HOME}/platform-tools/adb shell \"pm list instrumentation\""

    // uninstall apps first, if needed (optional)
    //sh "${ANDROID_HOME}/platform-tools/adb shell pm uninstall com.vgaidarji.cimatters"
    //sh "${ANDROID_HOME}/platform-tools/adb shell pm uninstall com.vgaidarji.cimatters.test"

    // manually install APK's and run instrumentation tests
    sh "./gradlew assembleDebug -PfabricApiKey=${env.FABRIC_API_KEY} -PfabricApiSecret=${env.FABRIC_API_SECRET}"
    sh "./gradlew assembleDebugAndroidTest -PfabricApiKey=${env.FABRIC_API_KEY} -PfabricApiSecret=${env.FABRIC_API_SECRET}"
    sh "${ANDROID_HOME}/platform-tools/adb install app/build/outputs/apk/app-debug.apk"
    sh "${ANDROID_HOME}/platform-tools/adb install app/build/outputs/apk/app-debug-androidTest.apk"
    sh "${ANDROID_HOME}/platform-tools/adb shell am instrument -w -r -e debug false -e class com.vgaidarji.cimatters.LoginActivityTest com.vgaidarji.cimatters.test/android.support.test.runner.AndroidJUnitRunner"

    // this variant isn't working, app isn't installed (Exception thrown)
    //sh "./gradlew connectedAndroidTest -PfabricApiKey=${env.FABRIC_API_KEY} -PfabricApiSecret=${env.FABRIC_API_SECRET}"

    // kill all emulators
    sh'''
    ${ANDROID_HOME}/platform-tools/adb devices | grep emulator | cut -f1 | while read line; do ${ANDROID_HOME}/platform-tools/adb -s $line emu kill; done
    '''
}

def notifyViaEmail() {
    step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: 'veaceslav.gaidarji@gmail.com', sendToIndividuals: true])
}
